
#include <Arduino.h>

// =============================================================================
// == DATA STRUCTURES & COLORS
// =============================================================================

// Add a value of 10 for bold effect (e.g., FG_RED + 10 = bold red)
#define FG_BLACK 30
#define FG_RED 31
#define FG_GREEN 32
#define FG_YELLOW 33
#define FG_BLUE 34
#define FG_MAGENTA 35
#define FG_CYAN 36
#define FG_WHITE 37

struct Box { int16_t x, y, w, h; uint8_t color; };
struct Text { int16_t x, y; const char* content; uint8_t color; };
struct Line { int16_t x1, y1, x2, y2; uint8_t color; };
struct Freehand { int16_t x, y; const char** lines; uint8_t line_count; uint8_t color; };

// =============================================================================
// == LOW-LEVEL RENDERING
// =============================================================================
void moveCursor(int16_t x, int16_t y) {
  Serial.print("\033["); Serial.print(y + 1); Serial.print(";");
  Serial.print(x + 1); Serial.print("H");
}

void setColor(uint8_t color) {
  if (color == 0) { // Color 0 is default/reset
    Serial.print("\033[0m");
    return;
  }
  if (color >= 40) { // Bold colors
    Serial.print("\033[1;"); // Bold
    Serial.print(color - 10);
  } else {
    Serial.print("\033[0;"); // Not bold
    Serial.print(color);
  }
  Serial.print("m");
}

void clearScreen() { Serial.print("\033[2J\033[H"); }

// =============================================================================
// == HIGH-LEVEL DRAWING (OPTIMIZED)
// =============================================================================
void draw(const Box& box) {
  setColor(box.color);
  // Optimized: draw full horizontal lines at once to reduce cursor moves
  char* h_line = (char*) malloc(box.w - 1);
  if (h_line) {
    memset(h_line, '-', box.w - 2);
    h_line[0] = '+';
    h_line[box.w - 2] = '+';
    h_line[box.w - 1] = '\0';
    moveCursor(box.x, box.y); Serial.print(h_line);
    moveCursor(box.x, box.y + box.h - 1); Serial.print(h_line);
    free(h_line);
  }
  // Draw vertical lines
  for (int16_t i = 1; i < box.h - 1; ++i) {
    moveCursor(box.x, box.y + i); Serial.print("|");
    moveCursor(box.x + box.w - 1, box.y + i); Serial.print("|");
  }
  setColor(0); // Reset color
}

void draw(const Text& text) {
  setColor(text.color);
  moveCursor(text.x, text.y);
  Serial.print(text.content);
  setColor(0);
}

void draw(const Line& line) {
  setColor(line.color);
  int16_t x1 = line.x1, y1 = line.y1;
  const int16_t x2 = line.x2, y2 = line.y2;
  int16_t dx = abs(x2 - x1), sx = x1 < x2 ? 1 : -1;
  int16_t dy = -abs(y2 - y1), sy = y1 < y2 ? 1 : -1;
  int16_t err = dx + dy, e2;
  while (true) {
    moveCursor(x1, y1); Serial.print("#");
    if (x1 == x2 && y1 == y2) break;
    e2 = 2 * err;
    if (e2 >= dy) { err += dy; x1 += sx; }
    if (e2 <= dx) { err += dx; y1 += sy; }
  }
  setColor(0);
}

void draw(const Freehand& art) {
  setColor(art.color);
  for (uint8_t i = 0; i < art.line_count; ++i) {
    moveCursor(art.x, art.y + i);
    Serial.print(art.lines[i]);
  }
  setColor(0);
}

// =============================================================================
// == UI SCREEN DEFINITIONS (Generated by Python)
// =============================================================================
void drawScreen_demo() {

}


// =============================================================================
// == ARDUINO SETUP & LOOP
// =============================================================================
// Optional: Define an enum for your screens for cleaner code
// enum Screen { MAIN_MENU, SETTINGS };
// Screen currentScreen = MAIN_MENU;

void setup() {
  Serial.begin(115200); // Using a faster baud rate
  while (!Serial) { delay(10); }
  delay(1000);
  Serial.print("\033[?25l"); // Hide cursor
  clearScreen();
  drawScreen_demo();
}

void loop() {
  // EXAMPLE: Simple screen manager. Type '1' or '2' in Serial Monitor.
  // if (Serial.available() > 0) {
  //   char command = Serial.read();
  //   clearScreen();
  //   if (command == '1') {
  //     drawScreen_demo();
  //   } else if (command == '2') {
  //     // [[SCREEN_2_CALL_PLACEHOLDER]]
  //   }
  // }
  delay(100);
}
